{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["//flatpickr  - is a lightweight and powerful datetime picker.\nimport flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\n\nlet userSelectedDate;\nconst refs = {\n  dateInput: document.querySelector('input#datetime-picker'),\n  startBtn: document.querySelector('button[data-start]'),\n  daySpan: document.querySelector('span[data-days]'),\n  hourSpan: document.querySelector('span[data-hours]'),\n  minSpan: document.querySelector('span[data-minutes]'),\n  secSpan: document.querySelector('span[data-seconds]'),\n};\n\nclass Timer {\n  constructor(onTick) {\n    this.intervalId = null;\n    this.onTick = onTick;\n  }\n\n  start() {\n    //disable DateTime input if timer started\n    refs.dateInput.disabled = true;\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now(); //this will be most likely deleted\n      //time left in ms\n      const deltaTime = userSelectedDate - currentTime;\n      //converted time from ms to the object { days, hours, minutes, seconds }\n      const convertedDeltaTime = this.convertMs(deltaTime);\n      //getting values from object and add zeros before single digit numbers using addLeadingZero function\n      const days = this.addLeadingZero(convertedDeltaTime.days);\n      const hours = this.addLeadingZero(convertedDeltaTime.hours);\n      const minutes = this.addLeadingZero(convertedDeltaTime.minutes);\n      const seconds = this.addLeadingZero(convertedDeltaTime.seconds);\n      //object with fixed zeros\n      const time = { days, hours, minutes, seconds };\n      //check if time is over and stop the timer\n      if (deltaTime <= 0) {\n        stop(intervalId);\n        return;\n      }\n\n      //output how much time left\n      this.onTick(time);\n    }, 1000);\n  }\n\n  stop() {\n    clearInterval(intervalId);\n  }\n\n  //converts ms to the object { days, hours, minutes, seconds }\n  convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n\n    // Remaining days\n    const days = Math.floor(ms / day);\n    // Remaining hours\n    const hours = Math.floor((ms % day) / hour);\n    // Remaining minutes\n    const minutes = Math.floor(((ms % day) % hour) / minute);\n    // Remaining seconds\n    const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n    return { days, hours, minutes, seconds };\n  }\n\n  //adds zero before single digit numbers\n  addLeadingZero(value) {\n    return value.toString().padStart(2, '0');\n  }\n}\n\nconst timer = new Timer(updateClockFace);\n\n//options for flatpickr\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    //this method validates chosen date and time\n    //chosen time has to be in the future\n    if (selectedDates[0].getTime() < Date.now()) {\n      //show message wrong date\n      iziToast.show({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        color: 'red',\n        position: 'topRight',\n        //TODO here must be more options........\n      });\n\n      //button disabled if date&time is in the past\n      refs.startBtn.disabled = true;\n      //saving selected datetime\n      userSelectedDate = selectedDates[0].getTime();\n      return;\n    }\n    //if true, save selected date\n    userSelectedDate = selectedDates[0].getTime();\n    //enable button\n    refs.startBtn.disabled = false;\n  },\n};\n\n//store the instance of flatpickr\nconst fp = flatpickr(refs.dateInput, options);\n\n//start button listener\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\n\nfunction updateClockFace({ days, hours, minutes, seconds }) {\n  refs.daySpan.textContent = `${days}`;\n  refs.hourSpan.textContent = `${hours}`;\n  refs.minSpan.textContent = `${minutes}`;\n  refs.secSpan.textContent = `${seconds}`;\n}\n"],"names":["userSelectedDate","refs","Timer","onTick","currentTime","deltaTime","convertedDeltaTime","days","hours","minutes","seconds","time","ms","value","timer","updateClockFace","options","selectedDates","flatpickr"],"mappings":"svBAIA,IAAIA,EACJ,MAAMC,EAAO,CACX,UAAW,SAAS,cAAc,uBAAuB,EACzD,SAAU,SAAS,cAAc,oBAAoB,EACrD,QAAS,SAAS,cAAc,iBAAiB,EACjD,SAAU,SAAS,cAAc,kBAAkB,EACnD,QAAS,SAAS,cAAc,oBAAoB,EACpD,QAAS,SAAS,cAAc,oBAAoB,CACtD,EAEA,MAAMC,CAAM,CACV,YAAYC,EAAQ,CAClB,KAAK,WAAa,KAClB,KAAK,OAASA,CACf,CAED,OAAQ,CAENF,EAAK,UAAU,SAAW,GAC1B,KAAK,WAAa,YAAY,IAAM,CAClC,MAAMG,EAAc,KAAK,MAEnBC,EAAYL,EAAmBI,EAE/BE,EAAqB,KAAK,UAAUD,CAAS,EAE7CE,EAAO,KAAK,eAAeD,EAAmB,IAAI,EAClDE,EAAQ,KAAK,eAAeF,EAAmB,KAAK,EACpDG,EAAU,KAAK,eAAeH,EAAmB,OAAO,EACxDI,EAAU,KAAK,eAAeJ,EAAmB,OAAO,EAExDK,EAAO,CAAE,KAAAJ,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAE5C,GAAIL,GAAa,EAAG,CAClB,KAAK,UAAU,EACf,MACD,CAGD,KAAK,OAAOM,CAAI,CACjB,EAAE,GAAI,CACR,CAED,MAAO,CACL,cAAc,UAAU,CACzB,CAGD,UAAUC,EAAI,CAQZ,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAE1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EAEpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EAEjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACvC,CAGD,eAAeG,EAAO,CACpB,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACxC,CACH,CAEA,MAAMC,EAAQ,IAAIZ,EAAMa,CAAe,EAGjCC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAGrB,GAAIA,EAAc,CAAC,EAAE,QAAO,EAAK,KAAK,MAAO,CAE3C,SAAS,KAAK,CACZ,MAAO,QACP,QAAS,qCACT,MAAO,MACP,SAAU,UAElB,CAAO,EAGDhB,EAAK,SAAS,SAAW,GAEzBD,EAAmBiB,EAAc,CAAC,EAAE,QAAO,EAC3C,MACD,CAEDjB,EAAmBiB,EAAc,CAAC,EAAE,QAAO,EAE3ChB,EAAK,SAAS,SAAW,EAC1B,CACH,EAGWiB,EAAUjB,EAAK,UAAWe,CAAO,EAG5Cf,EAAK,SAAS,iBAAiB,QAASa,EAAM,MAAM,KAAKA,CAAK,CAAC,EAE/D,SAASC,EAAgB,CAAE,KAAAR,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC1DT,EAAK,QAAQ,YAAc,GAAGM,CAAI,GAClCN,EAAK,SAAS,YAAc,GAAGO,CAAK,GACpCP,EAAK,QAAQ,YAAc,GAAGQ,CAAO,GACrCR,EAAK,QAAQ,YAAc,GAAGS,CAAO,EACvC"}